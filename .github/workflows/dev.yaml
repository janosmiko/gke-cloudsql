name: Terraform - Dev

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches:
      - main
    paths:
      - environments/dev/**
      - modules/**
  pull_request:
    branches:
      - main
    paths:
      - environments/dev/**
      - modules/**

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: Terraform
    environment: dev
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -reconfigure
        env:
          TF_WORKSPACE:
        working-directory: ./environments/dev
        shell: bash

      - name: Terraform Validate
        id: validate
        run: |
          terraform validate
        env:
          TF_WORKSPACE: dev
        working-directory: ./environments/dev
        shell: bash

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out tf.plan
        env:
          TF_WORKSPACE: dev
        working-directory: ./environments/dev
        shell: bash

      - name: Terraform Show
        id: show
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
        env:
          TF_WORKSPACE: dev
        working-directory: ./environments/dev
        shell: bash

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ github.workflow }} Part # ${i + 1}
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Validation ✅\`${{ steps.validate.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \n
              \`\`\`\n
              ${plans[i]}
              \`\`\`\n
              </details>\n
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;   

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        env:
          TF_WORKSPACE: dev
        working-directory: ./environments/dev
        shell: bash
